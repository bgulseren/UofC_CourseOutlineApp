[{"C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_react_app\\course_outline_app\\src\\index.js":"1","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_react_app\\course_outline_app\\src\\reportWebVitals.js":"2","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_react_app\\course_outline_app\\src\\App.js":"3"},{"size":500,"mtime":1608313401410,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1608313401414,"results":"6","hashOfConfig":"5"},{"size":8831,"mtime":1610171944404,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"ybzpuu",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_react_app\\course_outline_app\\src\\index.js",[],["16","17"],"C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_react_app\\course_outline_app\\src\\reportWebVitals.js",[],"C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_react_app\\course_outline_app\\src\\App.js",["18","19"],"import \"bulma/css/bulma.css\";\nimport React, { useEffect } from 'react';\nimport { useState } from \"react\";\nimport { Button } from '@material-ui/core';\n\nconst LearningOutcomeTableComponent = () => {\n  return (\n    <table className=\"table is-striped is-hoverable\" id=\"learningOutcomesTable\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Learning Outcome</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nconst GradeBreakdownTableComponent = () => {\n  return (\n    <table className=\"table is-striped is-hoverable\" id=\"gradeBreakdownTable\">\n      <thead>\n        <tr>\n          <th>Grading Component</th>\n          <th>Learning Outcome(s) Evaluated</th>\n          <th>Weight</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th><input className=\"input\" type=\"text\" placeholder=\"Assignment/Exam/Project\" id=\"newGradeCompName\" />  </th>\n          <td><input className=\"input\" type=\"text\" placeholder=\"Learning Outcome *\" id=\"newGradeLOutcome\" />  </td>\n          <td><input className=\"input\" type=\"text\" placeholder=\"Percentage\" id=\"newGradeCompWeight\" />  </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\n\nconst LearningOutcomesComponent = () => {\n  function addLearningOutcomeClickHandler(){\n    let table = document.getElementById('learningOutcomesTable');\n    let ID = table.rows.length-1;\n    let text = document.getElementById('newLearningOutcome');\n    if(text.value !== ''){\n      let row = table.insertRow(-1);\n      let cell1 = row.insertCell(0);\n      let cell2 = row.insertCell(1);\n      cell1.innerHTML = ID;\n      cell2.innerHTML = text.value;\n      text.value = '';\n    }\n  }\n\n  function deleteLearningOutcomeClickHandler(){\n    let table = document.getElementById('learningOutcomesTable');\n    let ID = table.rows.length - 2;\n    if(ID > 0){\n      document.getElementById('learningOutcomesTable').getElementsByTagName('tbody')[0].deleteRow(ID)\n    }\n  }\n\n  return (\n    <div>\n      <h1 className=\"title\">Learning Outcomes</h1>  \n      <input className=\"input\" type=\"text\" placeholder=\"Learning Outcome *\" id=\"newLearningOutcome\" />  \n      <Button variant=\"contained\" color=\"primary\" onClick={addLearningOutcomeClickHandler}>Add learning Outcome</Button>\n      <Button variant=\"contained\" color=\"secondary\" onClick={deleteLearningOutcomeClickHandler}>Delete Learning Outcome</Button>\n      <LearningOutcomeTableComponent />  \n    </div>\n  );\n};\n\nconst GradeBreakdownComponent = () => {\n  let tWeight = 0; //total weight\n\n  function addButtonClickHandler(){\n    let table = document.getElementById('gradeBreakdownTable').getElementsByTagName('tbody')[0];\n    // let ID = table.rows.length - 1;\n    let compName = document.getElementById('newGradeCompName')\n    let compLOutcome = document.getElementById('newGradeLOutcome')\n    let compWeight = document.getElementById('newGradeCompWeight')\n\n    // do not let exceeding %100\n\n    if (compName.value === \"\") {\n      console.log(\"component cannot be an empty string!\");\n    } else if (compLOutcome.value === \"\") {\n      console.log(\"outcome cannot be an empty string\");\n    } else if (isNaN((compWeight.value))) {\n      console.log(\"weight needs to be a number!\");\n    } else if (tWeight + Number(compWeight.value) > 100) {\n      console.log(\"weight cannot exceed %100\");\n    } else {\n      let row = table.insertRow(-1);\n      let cell0 = row.insertCell(0);\n      let cell1 = row.insertCell(1);\n      let cell2 = row.insertCell(2);\n      cell0.innerHTML = compName.value;\n      cell1.innerHTML = compLOutcome.value;\n      cell2.innerHTML = compWeight.value;\n\n      tWeight += Number(compWeight.value);\n      document.getElementById(\"total-weight\").value = tWeight;\n    }\n  }\n  \n  function deleteButtonClickHandler(){\n    let table = document.getElementById('gradeBreakdownTable').getElementsByTagName('tbody')[0];\n    let ID = table.rows.length - 1;\n    if (ID === 0) {\n      tWeight = 0;\n      document.getElementById(\"total-weight\").value = tWeight;\n    } else {\n      var weightToReduce = document.getElementById(\"gradeBreakdownTable\").rows[ID+1].cells[2].innerText;\n      tWeight -= Number(weightToReduce);\n      if (tWeight < 0) {\n        tWeight = 0;\n      }\n      document.getElementById(\"total-weight\").value = tWeight;\n      table.deleteRow(-1);\n    }\n\n  }\n\n  return (\n    <div>\n      <h1 className=\"title\">Final Grade Breakdown</h1> \n      <div className=\"buttons has-addons\">\n        <Button variant=\"contained\" color=\"primary\" onClick={addButtonClickHandler}>Add Grade Component</Button>\n        <Button variant=\"contained\" color=\"secondary\" onClick={deleteButtonClickHandler}>Delete Grade Component</Button>\n      </div>\n      <GradeBreakdownTableComponent />  \n      <label> Total Weight: % \n        <input className=\"output\" \n          type=\"text\" \n          id=\"total-weight\"\n          style={{ width:\"50px\", height:\"30px\" }}\n          readOnly />\n      </label>\n    </div>\n  );\n};\n\n\nfunction App() {\n\n  const [outline, setOutline] = useState([{\"text\":\"\", \"courseHours\":\"\", \"courseCredits\":\"\", \"calenderLink\":\"\"}]);\n  // const [courseHours, setCourseHours] = useState(\"\");\n  // const [courseCredits, setCourseCredits] = useState(\"\");\n  // const [calendarLink, setCalendarLink] = useState(\"\");\n  const [learningOutcomes, setLearningOutcomes] = useState(\"\");\n  // const [gradingComponents, setGradingComponents] = useState(\"\");\n  // const [gradingWeights, setGradingWeights] = useState(\"\");\n\n   // fetch course outlines from django api\n  async function fetchOutlines(){\n    const outlinesData = await fetch('http://127.0.0.1:8000/api/view-outlines/');\n    outlinesData.json().then(outlinesData => setOutline((outlinesData)));\n }\n\n    // fetch learning outcomes from django api\n  async function fetchLearningOutcomes(){\n    const learningOutcomesData = await fetch('http://127.0.0.1:8000/api/view-learningoutcomes/');\n    learningOutcomesData.json().then(learningOutcomesData => setLearningOutcomes((learningOutcomesData)));\n  }\n\n  async function fetchData(){\n    fetchOutlines();\n    fetchLearningOutcomes();\n  }\n\n  return (\n    <div>\n      <div className=\"container\" style={{ width:\"800px\"}}>\n      <h1 className=\"title\">Course Outline Generator</h1>\n    </div>\n\n      <section className = \"saved course selection\">\n        <div className=\"container\" style={{ width:\"800px\"}}>\n          <h1 className=\"title\">Select Course</h1>\n          <label >Edit Existing Course:</label>\n            <select name=\"courses\" id=\"courses\">\n              <option value=\"volvo\">Volvo</option>\n              <option value=\"saab\">Saab</option>\n              <option value=\"opel\">Opel</option>\n              <option value=\"audi\">Audi</option>\n            </select>\n            <button className=\"button is-primary\" onClick={fetchData}>Import Data</button>\n        </div>\n      </section>\n\n      <section className=\"outline section\">\n        <div className=\"container\" style={{ width:\"800px\"}}>\n          <h1 className=\"title\">Course Outline</h1>\n            <textarea className=\"textarea\" placeholder=\"Enter Text\" value={outline[0][\"text\"]} onChange={(e)=>setOutline(e.target.value)}></textarea>\n            <label> Course Hours: \n              <input className=\"input\" \n                type=\"text\" \n                placeholder=\"Enter course hours  *\" \n                id=\"course-hours\"\n                value={outline[0][\"courseHours\"]} \n                onChange={(e)=>setOutline(e.target.value)}\n                style={{ width:\"155px\", height:\"30px\" }} />  \n            </label>\n            <label> Academic Credits: \n              <input className=\"input\" \n                type=\"text\" \n                placeholder=\"# of Credits*\" \n                id=\"acemedic-credits\"\n                value={outline[0][\"courseCredits\"]} \n                onChange={(e)=>setOutline(e.target.value)}\n                style={{ width:\"100px\", height:\"30px\" }} />  \n            </label>\n            <label> Course Calendar: \n              <input className=\"input\" \n                type=\"text\" \n                placeholder=\"Enter calendar link  *\" \n                id=\"course-calendar\"\n                value={outline[0][\"calenderLink\"]} \n                onChange={(e)=>setOutline(e.target.value)}\n                style={{ width:\"155px\", height:\"30px\" }} />  \n            </label>\n            <button className=\"button is-primary\">Save</button>\n        </div>\n      </section>\n\n      <section className=\"learning outcomes section\">\n        <div className=\"container\" style={{ width:\"800px\"}}>\n          <LearningOutcomesComponent />  \n        </div>\n      </section>\n\n      <section className=\"grade breakdown section\">\n        <div className=\"container\" style={{ width:\"800px\"}}>\n          <GradeBreakdownComponent />\n        </div>\n      </section>\n\n    </div>\n  );\n}\n\n\n\nexport default App;",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":2,"column":17,"nodeType":"26","messageId":"27","endLine":2,"endColumn":26},{"ruleId":"24","severity":1,"message":"28","line":158,"column":10,"nodeType":"26","messageId":"27","endLine":158,"endColumn":26},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'learningOutcomes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]