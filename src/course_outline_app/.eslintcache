[{"C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\index.js":"1","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\App.js":"2","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\reportWebVitals.js":"3","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\Instructor.js":"4","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\Course.js":"5","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\CourseDetail.js":"6","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\GradeComponent.js":"7","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\Timetable.js":"8","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\LearningOutcome.js":"9","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\Textbook.js":"10","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\GradeBreakdown.js":"11"},{"size":504,"mtime":1611779444760,"results":"12","hashOfConfig":"13"},{"size":807,"mtime":1611780345078,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1611779444762,"results":"15","hashOfConfig":"13"},{"size":8561,"mtime":1611779444753,"results":"16","hashOfConfig":"13"},{"size":10854,"mtime":1611779444747,"results":"17","hashOfConfig":"13"},{"size":4042,"mtime":1611779444748,"results":"18","hashOfConfig":"13"},{"size":7267,"mtime":1611801600349,"results":"19","hashOfConfig":"13"},{"size":10613,"mtime":1611802265333,"results":"20","hashOfConfig":"13"},{"size":7205,"mtime":1611801588526,"results":"21","hashOfConfig":"13"},{"size":7113,"mtime":1611779444756,"results":"22","hashOfConfig":"13"},{"size":9629,"mtime":1611779444750,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1pe4tpc",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\index.js",[],["53","54"],"C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\App.js",[],"C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\reportWebVitals.js",[],"C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\Instructor.js",["55"],"import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport { forwardRef } from 'react'\nimport Avatar from 'react-avatar'\n\nimport Course from './Course'\n\nimport MaterialTable from 'material-table'\nimport AddBox from '@material-ui/icons/AddBox'\nimport ArrowDownward from '@material-ui/icons/ArrowDownward'\nimport Check from '@material-ui/icons/Check'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\nimport ChevronRight from '@material-ui/icons/ChevronRight'\nimport Clear from '@material-ui/icons/Clear'\nimport DeleteOutline from '@material-ui/icons/DeleteOutline'\nimport Edit from '@material-ui/icons/Edit'\nimport FilterList from '@material-ui/icons/FilterList'\nimport FirstPage from '@material-ui/icons/FirstPage'\nimport LastPage from '@material-ui/icons/LastPage'\nimport Remove from '@material-ui/icons/Remove'\nimport SaveAlt from '@material-ui/icons/SaveAlt'\nimport Search from '@material-ui/icons/Search'\nimport ViewColumn from '@material-ui/icons/ViewColumn'\nimport axios from 'axios'\nimport Alert from '@material-ui/lab/Alert'\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n}\n\nconst api = axios.create({\n  baseURL: `http://localhost:8000/api`,\n})\n\nfunction validateEmail(email) {\n  const re = /^((?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\]))$/\n  return re.test(String(email).toLowerCase())\n}\n\nfunction Instructor() {\n  var columns = [\n    { title: 'id', field: 'id', hidden: true },\n    {\n      title: 'Avatar',\n      render: (rowData) => (\n        <Avatar\n          maxInitials={2}\n          size={40}\n          round={true}\n          name={\n            rowData === undefined\n              ? ' '\n              : rowData.first_name[0] + ' ' + rowData.last_name[0]\n          }\n        />\n      ),\n    },\n    { title: 'First name', field: 'first_name' },\n    { title: 'Last name', field: 'last_name' },\n    { title: 'Phone', field: 'phone' },\n    { title: 'Office', field: 'office' },\n    { title: 'email', field: 'email' },\n  ]\n  const [data, setData] = useState([]) //table data\n\n  //for error handling\n  const [iserror, setIserror] = useState(false)\n  const [errorMessages, setErrorMessages] = useState([])\n\n  const [isactive, setIsactive] = useState(true)\n  const [selinstructor, setSelinstructor] = useState(-1)\n\n  const [headermessage, setHeadermessage] = useState('Select an instructor')\n\n  useEffect(() => {\n    api\n      .get('/instructors/')\n      .then((res) => {\n        setData(res.data)\n      })\n      .catch((error) => {\n        console.log('Error')\n      })\n  }, [])\n\n  const selectInstructor = (instructor) => {\n    setIsactive(false)\n    setHeadermessage(\n      'List of courses for ' +\n        instructor.first_name +\n        ' ' +\n        instructor.last_name\n    )\n    setSelinstructor(instructor.id)\n  }\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    //validation\n    let errorList = []\n    if (newData.first_name === '') {\n      errorList.push('Please enter first name')\n    }\n    if (newData.last_name === '') {\n      errorList.push('Please enter last name')\n    }\n    if (newData.office === '') {\n      errorList.push('Please enter office')\n    }\n    if (newData.phone === '') {\n      errorList.push('Please enter phone')\n    }\n    if (newData.email === '' || validateEmail(newData.email) === false) {\n      errorList.push('Please enter a valid email')\n    }\n\n    if (errorList.length < 1) {\n      api\n        .put('/instructors/' + newData.id + '/', newData)\n        .then((res) => {\n          const dataUpdate = [...data]\n          const index = oldData.tableData.id\n          dataUpdate[index] = newData\n          setData([...dataUpdate])\n          resolve()\n          setIserror(false)\n          setErrorMessages([])\n        })\n        .catch((error) => {\n          setErrorMessages(['Update failed! Server error'])\n          setIserror(true)\n          resolve()\n        })\n    } else {\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n    }\n  }\n\n  const handleRowAdd = (newData, resolve) => {\n    //validation\n    let errorList = []\n    if (newData.first_name === undefined) {\n      errorList.push('Please enter first name')\n    }\n    if (newData.last_name === undefined) {\n      errorList.push('Please enter last name')\n    }\n    if (newData.office === undefined) {\n      errorList.push('Please enter office')\n    }\n    if (newData.phone === undefined) {\n      errorList.push('Please enter phone number')\n    }\n    if (newData.email === undefined || validateEmail(newData.email) === false) {\n      errorList.push('Please enter a valid email')\n    }\n\n    if (errorList.length < 1) {\n      //no error\n      console.log(newData)\n      api\n        .post('/instructors/', newData)\n        .then((res) => {\n          let dataToAdd = [...data]\n          dataToAdd.push(newData)\n          setData(dataToAdd)\n          resolve()\n          setErrorMessages([])\n          setIserror(false)\n        })\n        .catch((error) => {\n          setErrorMessages(['Cannot add data. Server error!'])\n          setIserror(true)\n          resolve()\n        })\n    } else {\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n    }\n  }\n\n  const handleRowDelete = (oldData, resolve) => {\n    api\n      .delete('/instructors/' + oldData.id + '/')\n      .then((res) => {\n        const dataDelete = [...data]\n        const index = oldData.tableData.id\n        dataDelete.splice(index, 1)\n        setData([...dataDelete])\n        resolve()\n      })\n      .catch((error) => {\n        setErrorMessages(['Delete failed! Server error'])\n        setIserror(true)\n        resolve()\n      })\n  }\n\n  return (\n    <div className='Instructor'>\n      <div>\n        {iserror && (\n          <Alert severity='error'>\n            {errorMessages.map((msg, i) => {\n              return <div key={i}>{msg}</div>\n            })}\n          </Alert>\n        )}\n      </div>\n      <h4>{headermessage}</h4>\n      {isactive && (\n        <MaterialTable\n          title='List of Instructors'\n          columns={columns}\n          data={data}\n          icons={tableIcons}\n          editable={{\n            onRowUpdate: (newData, oldData) =>\n              new Promise((resolve) => {\n                handleRowUpdate(newData, oldData, resolve)\n              }),\n            onRowAdd: (newData) =>\n              new Promise((resolve) => {\n                handleRowAdd(newData, resolve)\n              }),\n            onRowDelete: (oldData) =>\n              new Promise((resolve) => {\n                handleRowDelete(oldData, resolve)\n              }),\n          }}\n          options={{\n            selection: true,\n            showSelectAllCheckbox: false,\n            showTitle: false,\n          }}\n          onSelectionChange={(rows) => selectInstructor(rows[0])}\n        />\n      )}\n\n      {!isactive && (\n        <div>\n          <Course selinstructor={selinstructor} />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Instructor\n","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\Course.js",["56"],"import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport { forwardRef } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport CourseDetail from './CourseDetail'\nimport GradeComponent from './GradeComponent'\nimport LearningOutcome from './LearningOutcome'\nimport Timetable from './Timetable'\nimport Textbook from './Textbook'\nimport GradeBreakdown from './GradeBreakdown'\n\nimport MaterialTable from 'material-table'\nimport AddBox from '@material-ui/icons/AddBox'\nimport ArrowDownward from '@material-ui/icons/ArrowDownward'\nimport Check from '@material-ui/icons/Check'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\nimport ChevronRight from '@material-ui/icons/ChevronRight'\nimport Clear from '@material-ui/icons/Clear'\nimport DeleteOutline from '@material-ui/icons/DeleteOutline'\nimport Edit from '@material-ui/icons/Edit'\nimport FilterList from '@material-ui/icons/FilterList'\nimport FirstPage from '@material-ui/icons/FirstPage'\nimport LastPage from '@material-ui/icons/LastPage'\nimport Remove from '@material-ui/icons/Remove'\nimport SaveAlt from '@material-ui/icons/SaveAlt'\nimport Search from '@material-ui/icons/Search'\nimport ViewColumn from '@material-ui/icons/ViewColumn'\nimport axios from 'axios'\nimport Alert from '@material-ui/lab/Alert'\n\nimport Accordion from '@material-ui/core/Accordion'\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\nimport Typography from '@material-ui/core/Typography'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n}\n\nconst api = axios.create({\n  baseURL: `http://localhost:8000/api`,\n})\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n}))\n\nfunction Course({ selinstructor }) {\n  const classes = useStyles()\n  var columns = [\n    { title: 'id', field: 'id', hidden: true },\n    { title: 'Instructor', field: 'instructor', hidden: true },\n    { title: 'Course code', field: 'code' },\n    { title: 'Course name', field: 'name' },\n    { title: 'Description', field: 'description', hidden: true },\n    { title: 'Hours', field: 'hours' },\n    { title: 'Calendar Reference', field: 'calendar_ref', hidden: true },\n    { title: 'Grade Breakdown', field: 'grade_breakdown', hidden: true },\n  ]\n  const [data, setData] = useState([]) //table data\n\n  //for error handling\n  const [iserror, setIserror] = useState(false)\n  const [errorMessages, setErrorMessages] = useState([])\n\n  const [isactive, setIsactive] = useState(true)\n  const [selcourse, setSelcourse] = useState(-1)\n\n  const [headermessage, setHeadermessage] = useState(\n    '2. Select a course from the list'\n  )\n\n  useEffect(() => {\n    refresh()\n  }, [])\n\n  const selectCourse = (course) => {\n    setIsactive(false)\n    setHeadermessage('Selected course: ' + course.code + ' - ' + course.name)\n    setSelcourse(course.id)\n  }\n\n  const refresh = () => {\n    // update data\n    api\n      .get('/courses/?instructor=' + selinstructor)\n      .then((res) => {\n        setData(res.data)\n      })\n      .catch((error) => {\n        console.log('Error')\n      })\n  }\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    //validation\n    let errorList = []\n    if (newData.code === '') {\n      errorList.push('Please enter course code')\n    }\n    if (newData.name === '') {\n      errorList.push('Please enter course name')\n    }\n    if (newData.hours === '') {\n      errorList.push('Please enter course hours per week')\n    }\n\n    let courseData = {\n      instructor: selinstructor,\n      code: newData.code,\n      name: newData.name,\n      description: newData.description,\n      hours: newData.hours,\n      calendar_ref: newData.calendar_ref,\n      grade_breakdown: newData.grade_breakdown,\n    }\n\n    if (errorList.length < 1) {\n      api\n        .put('/courses/' + oldData.id + '/', courseData)\n        .then((res) => {\n          // refresh list from remote source\n          refresh()\n\n          resolve()\n          setIserror(false)\n          setErrorMessages([])\n        })\n        .catch((error) => {\n          setErrorMessages(['Update failed! Server error'])\n          setIserror(true)\n          resolve()\n        })\n    } else {\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n    }\n  }\n\n  const handleRowAdd = (newData, resolve) => {\n    //validation\n    let errorList = []\n    if (newData.code === undefined) {\n      errorList.push('Please enter course code')\n    }\n    if (newData.name === undefined) {\n      errorList.push('Please enter course name')\n    }\n    if (newData.hours === undefined) {\n      errorList.push('Please enter course hours per week')\n    }\n\n    let courseData = {\n      instructor: selinstructor,\n      code: newData.code,\n      name: newData.name,\n      description: 'a',\n      hours: newData.hours,\n      calendar_ref: 'a',\n      grade_breakdown: 'a',\n    }\n\n    if (errorList.length < 1) {\n      //no error\n      api\n        .post('/courses/', courseData)\n        .then((res) => {\n          // refresh list from remote source\n          refresh()\n\n          resolve()\n          setErrorMessages([])\n          setIserror(false)\n        })\n        .catch((error) => {\n          setErrorMessages(['Cannot add data. Server error!'])\n          setIserror(true)\n          resolve()\n        })\n    } else {\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n    }\n  }\n\n  const handleRowDelete = (oldData, resolve) => {\n    console.log(oldData)\n    api\n      .delete('/courses/' + oldData.id + '/')\n      .then((res) => {\n        // refresh list from remote source\n        refresh()\n\n        resolve()\n      })\n      .catch((error) => {\n        setErrorMessages(['Delete failed! Server error'])\n        setIserror(true)\n        resolve()\n      })\n  }\n\n  return (\n    <div className='Course'>\n      <div>\n        {iserror && (\n          <Alert severity='error'>\n            {errorMessages.map((msg, i) => {\n              return <div key={i}>{msg}</div>\n            })}\n          </Alert>\n        )}\n      </div>\n      <h4>{headermessage}</h4>\n      {isactive && (\n        <MaterialTable\n          title='List of Courses'\n          columns={columns}\n          data={data}\n          icons={tableIcons}\n          editable={{\n            onRowUpdate: (newData, oldData) =>\n              new Promise((resolve) => {\n                handleRowUpdate(newData, oldData, resolve)\n              }),\n            onRowAdd: (newData) =>\n              new Promise((resolve) => {\n                handleRowAdd(newData, resolve)\n              }),\n            onRowDelete: (oldData) =>\n              new Promise((resolve) => {\n                handleRowDelete(oldData, resolve)\n              }),\n          }}\n          options={{\n            selection: true,\n            showSelectAllCheckbox: false,\n            showTitle: false,\n          }}\n          onSelectionChange={(rows) => selectCourse(rows[0])}\n        />\n      )}\n\n      {!isactive && (\n        <div>\n          <CourseDetail selcourse={selcourse} />\n\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls='panel1a-content'\n              id='panel1a-header'\n            >\n              <Typography className={classes.heading}>\n                Learning Outcomes\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <LearningOutcome selcourse={selcourse} />\n            </AccordionDetails>\n          </Accordion>\n\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls='panel1a-content'\n              id='panel1a-header'\n            >\n              <Typography className={classes.heading}>Timetable</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Timetable selcourse={selcourse} />\n            </AccordionDetails>\n          </Accordion>\n\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls='panel1a-content'\n              id='panel1a-header'\n            >\n              <Typography className={classes.heading}>\n                Grade Components\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <GradeComponent selcourse={selcourse} />\n            </AccordionDetails>\n          </Accordion>\n\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls='panel1a-content'\n              id='panel1a-header'\n            >\n              <Typography className={classes.heading}>Textbooks</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Textbook selcourse={selcourse} />\n            </AccordionDetails>\n          </Accordion>\n\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls='panel1a-content'\n              id='panel1a-header'\n            >\n              <Typography className={classes.heading}>\n                Grade Breakdown\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <GradeBreakdown selcourse={selcourse} />\n            </AccordionDetails>\n          </Accordion>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Course\n","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\CourseDetail.js",["57","58","59"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Grid from '@material-ui/core/Grid';\n\nimport validator from 'validator';\nimport axios from 'axios'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '50ch',\n    },\n  },\n}));\n\nconst api = axios.create({\n    baseURL: `http://localhost:8000/api`\n  })\n\nfunction CourseDetail({selcourse}) {\n  const classes = useStyles();\n  const [data, setData] = useState([]); //original data (from source)\n  const [description, setDescription] = useState('');\n  const [hours, setHours] = useState(0);\n  const [calendar_ref, setCalendar_ref] = useState('');\n\n  const [changedData, setChangedData] = useState(false);\n\n//   {title: \"Description\", field: \"description\", hidden: true},\n//   {title: \"Hours\", field: \"hours\"},\n//   {title: \"Calendar Reference\", field: \"calendar_ref\", hidden: true},\n//   {title: \"Grade Breakdown\", field: \"grade_breakdown\", hidden: true},\n\n\n  useEffect(() => { \n    refresh()\n  }, [])\n\n  const refresh = () => {\n    // update data\n    api.get(\"/courses/\" + selcourse + \"/\")\n        .then(res => {\n            setData(res.data)\n\n            setDescription(res.data.description)\n            setHours(res.data.hours)\n            setCalendar_ref(res.data.calendar_ref)\n         })\n         .catch(error=>{\n             console.log(\"Error\")\n         })\n         \n  }\n\n  const clickSaveHandler = () => {\n    api.patch(\"/courses/\" + selcourse + \"/\", data);\n\n    // make save button invisible again since data is submit to remote\n    setChangedData(false);\n  };\n\n /**\n * Course Description Functions\n */\n\n  const handleChangeDescription = (event) => {\n\n    //update new data\n    setDescription(event.target.value);\n    let copyData = { ...data }\n    copyData.description = event.target.value;\n    setData(copyData);\n\n    setChangedData(true);\n\n  };\n\n/**\n * Course Hours Functions\n */\n\n  const handleChangeHours = (event) => {\n\n    //update new data\n    setHours(event.target.value);\n    let copyData = { ...data }\n    copyData.hours = event.target.value;\n    setData(copyData);\n\n    setChangedData(true);\n\n  };\n\n  const handleChangeCalendarRef = (event) => {\n\n    //update new data\n    setCalendar_ref(event.target.value);\n    let copyData = { ...data }\n    copyData.calendar_ref = event.target.value;\n    setData(copyData);\n\n    setChangedData(true);\n\n  };\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\">\n        <div>\n            <TextField\n                id=\"course-description\"\n                label=\"Course Description\"\n                multiline\n                rows={4}\n                value={description}\n                onChange={handleChangeDescription}\n                variant=\"outlined\"\n            />\n        </div>\n      \n        <div>\n            <TextField\n                id=\"course-hours\"\n                label=\"Course Hours\"\n                type=\"number\"\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                value={hours}\n                onChange={handleChangeHours}\n                variant=\"outlined\"\n            />\n        </div>\n\n        <div>\n            <TextField\n                id=\"calendar-reference\"\n                label=\"Calendar Reference\"\n                value={calendar_ref}\n                onChange={handleChangeCalendarRef}\n                variant=\"outlined\"\n            />\n\n\n            <Button \n                variant=\"contained\"\n                color=\"primary\"\n                size=\"small\"\n                startIcon={<SaveIcon />}\n                disabled={!changedData}\n                className={classes.button}\n                onClick={clickSaveHandler}\n                >\n                Save\n            </Button>\n        </div>\n    </form>\n  );\n}\n\nexport default CourseDetail;","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\GradeComponent.js",["60"],"C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\Timetable.js",["61"],"C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\LearningOutcome.js",["62"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { forwardRef } from 'react';\n\nimport MaterialTable from \"material-table\";\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport axios from 'axios'\nimport Alert from '@material-ui/lab/Alert';\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst api = axios.create({\n  baseURL: `http://localhost:8000/api`\n})\n\nfunction LearningOutcome({selcourse}) {\n\n  var columns = [\n    {title: \"id\", field: \"id\", hidden: true},\n    {title: \"course_id\", field: \"course_id\", hidden: true},\n    {title: \"Description\", field: \"description\"},\n    {\n      title: \"Graduate Attribute\",\n      field: \"gradAttribute\",\n      lookup:\n       {\n         1:\"A1. A knowledge base for engineering\",\n         2:\"A2. Problem analysis\",\n         3:\"A3. Investigation\",\n         4:\"A4. Design\",\n         5:\"A5. Use of enigeineering tools\",\n         6:\"A6. Individual and team work\",\n         7:\"A7. Communication skills\",\n         8:\"A8. Professionalism\",\n         9:\"A9. Impact of engineering on society/environment\",\n         10:\"A10. Ethics and equality\",\n         11:\"A11. Economics and project management\",\n         12:\"A12. Life-long learning\"\n       } \n    },\n    {\n      title: \"Instruction Level\",\n      field: \"instLevel\",\n      lookup:\n       {\n         1:\"A (Applied)\",\n         2:\"I (Introduced)\",\n         3:\"D (Developed)\"\n       } \n    }\n  ]\n  const [data, setData] = useState([]); //table data\n\n  //for error handling\n  const [iserror, setIserror] = useState(false)\n  const [errorMessages, setErrorMessages] = useState([])\n\n  useEffect(() => { \n    refresh()\n  }, [])\n\n  const refresh = () => {\n    // update data\n    api.get(\"/learningOutcomes?course_id=\" + selcourse)\n        .then(res => {               \n            setData(res.data)\n         })\n         .catch(error=>{\n             console.log(\"Error\")\n         })\n  }\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    //validation\n    let errorList = []\n    if(newData.description === \"\"){\n      errorList.push(\"Please enter description\")\n    }\n    if(newData.gradAttribute === \"\"){\n      errorList.push(\"Please enter graduate attribute\")\n    }\n    if(newData.instLevel === \"\"){\n      errorList.push(\"Please enter instruction level\")\n    }\n\n    if(errorList.length < 1){\n      api.put(\"/learningOutcomes/\" + newData.id + \"/\", newData)\n      .then(res => {\n        refresh()\n        resolve()\n        setIserror(false)\n        setErrorMessages([])\n      })\n      .catch(error => {\n        setErrorMessages([\"Update failed! Server error\"])\n        setIserror(true)\n        resolve()\n        \n      })\n    }else{\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n\n    }\n    \n  }\n\n  const handleRowAdd = (newData, resolve) => {\n    //validation\n    let errorList = []\n    if(newData.description === undefined){\n      errorList.push(\"Please enter description\")\n    }\n    if(newData.gradAttribute === undefined){\n      errorList.push(\"Please enter graduate attribute\")\n    }\n    if(newData.instLevel === undefined){\n      errorList.push(\"Please enter instruction level\")\n    }\n\n    let learningOutcomeData = {\n      course_id: selcourse,\n      description: newData.description,\n      gradAttribute: newData.gradAttribute,\n      instLevel: newData.instLevel,\n    }\n\n    if(errorList.length < 1){ //no error\n      api.post(\"/learningOutcomes/\", learningOutcomeData)\n      .then(res => {\n\n        refresh()\n        resolve()\n        setErrorMessages([])\n        setIserror(false)\n      })\n      .catch(error => {\n        setErrorMessages([\"Cannot add data. Server error!\"])\n        setIserror(true)\n        resolve()\n      })\n    }else{\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n    }\n\n    \n  }\n\n  const handleRowDelete = (oldData, resolve) => {\n    \n    api.delete(\"/learningOutcomes/\" + oldData.id + \"/\")\n      .then(res => {\n        refresh()\n\n        resolve()\n      })\n      .catch(error => {\n        setErrorMessages([\"Delete failed! Server error\"])\n        setIserror(true)\n        resolve()\n      })\n  }\n\n\n  return (\n    \n    <div className=\"LearningOutcome\">\n      <div>\n        {iserror && \n          <Alert severity=\"error\">\n              {errorMessages.map((msg, i) => {\n                  return <div key={i}>{msg}</div>\n              })}\n          </Alert>\n        }       \n      </div>\n\n      <MaterialTable\n        title=\"List of Learning Outcomes\"\n        columns={columns}\n        data={data}\n        icons={tableIcons}\n        editable={{\n\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve) => {\n                handleRowUpdate(newData, oldData, resolve);\n                \n            }),\n          onRowAdd: (newData) =>\n            new Promise((resolve) => {\n              handleRowAdd(newData, resolve)\n            }),\n          onRowDelete: (oldData) =>\n            new Promise((resolve) => {\n              handleRowDelete(oldData, resolve)\n            }),\n        }}\n        options={{\n          search: false,\n          selection: false,\n          showSelectAllCheckbox: false,\n          showTitle: false,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default LearningOutcome;","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\Textbook.js",["63"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { forwardRef } from 'react';\n\nimport MaterialTable from \"material-table\";\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport axios from 'axios'\nimport Alert from '@material-ui/lab/Alert';\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst api = axios.create({\n  baseURL: `http://localhost:8000/api`\n})\n\nfunction Textbook({selcourse}) {\n\n  var columns = [\n    {title: \"id\", field: \"id\", hidden: true},\n    {title: \"course_id\", field: \"course_id\", hidden: true},\n    {title: \"Title\", field: \"title\"},\n    {title: \"Author(s)\", field: \"authors\"},\n    {title: \"Edition\", field: \"edition\"},\n    {title: \"Year\", field: \"year\"},\n    {title: \"Publisher\", field: \"publisher\"},\n    {title: \"Recommended?\", field: \"is_recommended\"},\n  ]\n  const [data, setData] = useState([]); //table data\n\n  //for error handling\n  const [iserror, setIserror] = useState(false)\n  const [errorMessages, setErrorMessages] = useState([])\n\n  useEffect(() => { \n    refresh()\n  }, [])\n\n  const refresh = () => {\n    // update data\n    api.get(\"/textbooks?course_id=\" + selcourse)\n        .then(res => {               \n            setData(res.data)\n         })\n         .catch(error=>{\n             console.log(\"Error\")\n         })\n  }\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    //validation\n    let errorList = []\n    if(newData.title === \"\"){\n      errorList.push(\"Please enter title\")\n    }\n    if(newData.authors === \"\"){\n      errorList.push(\"Please enter at least an author\")\n    }\n    if(newData.edition === \"\"){\n      errorList.push(\"Please enter the edition\")\n    }\n    if(newData.year === \"\"){\n      errorList.push(\"Please enter year\")\n    }\n    if(newData.publisher === \"\"){\n      errorList.push(\"Please enter publisher\")\n    }\n    if(newData.is_recommended === \"\"){\n      errorList.push(\"Please enter recommended\")\n    }\n\n    if(errorList.length < 1){\n      api.put(\"/textbooks/\" + newData.id + \"/\", newData)\n      .then(res => {\n        refresh()\n        resolve()\n        setIserror(false)\n        setErrorMessages([])\n      })\n      .catch(error => {\n        setErrorMessages([\"Update failed! Server error\"])\n        setIserror(true)\n        resolve()\n        \n      })\n    }else{\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n\n    }\n    \n  }\n\n  const handleRowAdd = (newData, resolve) => {\n    //validation\n    let errorList = []\n    if(newData.title === undefined){\n      errorList.push(\"Please enter title\")\n    }\n    if(newData.authors === undefined){\n      errorList.push(\"Please enter at least an author\")\n    }\n    if(newData.edition === undefined){\n      errorList.push(\"Please enter the edition\")\n    }\n    if(newData.year === undefined){\n      errorList.push(\"Please enter year\")\n    }\n    if(newData.publisher === undefined){\n      errorList.push(\"Please enter publisher\")\n    }\n    if(newData.is_recommended === undefined){\n      errorList.push(\"Please enter recommended\")\n    }\n\n    let textbookData = {\n      course_id: selcourse,\n      title: newData.title,\n      authors: newData.authors,\n      edition: newData.edition,\n      year: newData.year,\n      publisher: newData.publisher,\n      is_recommended: newData.is_recommended,\n    }\n\n    if(errorList.length < 1){ //no error\n      api.post(\"/textbooks/\", textbookData)\n      .then(res => {\n\n        refresh()\n        resolve()\n        setErrorMessages([])\n        setIserror(false)\n      })\n      .catch(error => {\n        setErrorMessages([\"Cannot add data. Server error!\"])\n        setIserror(true)\n        resolve()\n      })\n    }else{\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n    }\n\n    \n  }\n\n  const handleRowDelete = (oldData, resolve) => {\n    \n    api.delete(\"/textbooks/\" + oldData.id + \"/\")\n      .then(res => {\n        refresh()\n\n        resolve()\n      })\n      .catch(error => {\n        setErrorMessages([\"Delete failed! Server error\"])\n        setIserror(true)\n        resolve()\n      })\n  }\n\n\n  return (\n    \n    <div className=\"Textbook\">\n      <div>\n        {iserror && \n          <Alert severity=\"error\">\n              {errorMessages.map((msg, i) => {\n                  return <div key={i}>{msg}</div>\n              })}\n          </Alert>\n        }       \n      </div>\n\n      <MaterialTable\n        title=\"List of Textbooks\"\n        columns={columns}\n        data={data}\n        icons={tableIcons}\n        editable={{\n\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve) => {\n                handleRowUpdate(newData, oldData, resolve);\n                \n            }),\n          onRowAdd: (newData) =>\n            new Promise((resolve) => {\n              handleRowAdd(newData, resolve)\n            }),\n          onRowDelete: (oldData) =>\n            new Promise((resolve) => {\n              handleRowDelete(oldData, resolve)\n            }),\n        }}\n        options={{\n          search: false,\n          selection: false,\n          showSelectAllCheckbox: false,\n          showTitle: false,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Textbook;","C:\\Users\\khale\\Desktop\\MEng Software Engineering\\ENSF 607\\WebAppProject\\src\\course_outline_app\\src\\components\\GradeBreakdown.js",["64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80"],"import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport Slider from '@material-ui/core/Slider'\nimport Button from '@material-ui/core/Button'\nimport SaveIcon from '@material-ui/icons/Save'\n\nimport axios from 'axios'\n\nconst useStyles = makeStyles({\n  root: {\n    width: 300,\n  },\n})\n\nfunction valuetext(value) {\n  return `${value}%`\n}\n\nconst api = axios.create({\n  baseURL: `http://localhost:8000/api`,\n})\n\n// const rows = [\n//   createData('A+', 100, 6.0),\n//   createData('A', 237, 9.0),\n//   createData('A-', 262, 16.0),\n//   createData('B+', 305, 3.7),\n//   createData('B-', 356, 16.0),\n//   createData('C+', 159, 6.0),\n//   createData('C', 237, 9.0),\n//   createData('C-', 262, 16.0),\n//   createData('D+', 305, 3.7),\n//   createData('D', 356, 16.0),\n//   createData('F', 356, 16.0),\n// ];\n\nexport default function GradeBreakdown({ selcourse }) {\n  const classes = useStyles()\n\n  const [data, setData] = React.useState('')\n\n  //for error handling\n  const [iserror, setIserror] = useState(false)\n  const [errorMessages, setErrorMessages] = useState([])\n\n  useEffect(() => {\n    refresh()\n  }, [])\n\n  const refresh = () => {\n    // update data\n    api\n      .get('/gradeBreakdowns?course_id=' + selcourse)\n      .then((res) => {\n        if (res.data.id === undefined) {\n          console.log(res.data)\n          let gradeData = {\n            course_id: selcourse,\n            ap: 95,\n            an: 90,\n            am: 85,\n            bp: 80,\n            bn: 75,\n            bm: 70,\n            cp: 65,\n            cn: 60,\n            cm: 55,\n            dp: 50,\n            dn: 45,\n          }\n\n          setData(gradeData)\n        } else {\n          setData(res.data)\n        }\n      })\n      .catch((error) => {\n        console.log('Error')\n      })\n  }\n\n  const clickSaveHandler = () => {\n    if (data.id == undefined) {\n      let copyData = { ...data }\n      copyData.course_id = selcourse\n      api.post('/gradeBreakdowns/', copyData)\n      console.log(copyData)\n    } else {\n      api.patch('/gradeBreakdowns/' + data.id + '/', data)\n    }\n\n    // make save button invisible again since data is submit to remote\n    // setChangedData(false)\n  }\n\n  const validate = (grade, rank) => {\n    if (grade < data.an && rank < 1) {\n      let dataCopy = { ...data }\n      dataCopy.an = grade\n      setData(dataCopy)\n    }\n\n    if (grade < data.am && rank < 2) {\n      let dataCopy = { ...data }\n      dataCopy.am = grade\n      setData(dataCopy)\n    }\n\n    if (grade < data.bp && rank < 3) {\n      let dataCopy = { ...data }\n      dataCopy.bp = grade\n      setData(dataCopy)\n    }\n\n    if (grade < data.bn && rank < 4) {\n      let dataCopy = { ...data }\n      dataCopy.bn = grade\n      setData(dataCopy)\n    }\n\n    if (grade < data.bm && rank < 5) {\n      let dataCopy = { ...data }\n      dataCopy.bm = grade\n      setData(dataCopy)\n    }\n\n    if (grade < data.cp && rank < 6) {\n      let dataCopy = { ...data }\n      dataCopy.cp = grade\n      setData(dataCopy)\n    }\n\n    if (grade < data.cn && rank < 7) {\n      let dataCopy = { ...data }\n      dataCopy.cn = grade\n      setData(dataCopy)\n    }\n\n    if (grade < data.cm && rank < 8) {\n      let dataCopy = { ...data }\n      dataCopy.cm = grade\n      setData(dataCopy)\n    }\n\n    if (grade < data.dp && rank < 9) {\n      let dataCopy = { ...data }\n      dataCopy.dp = grade\n      setData(dataCopy)\n    }\n\n    if (grade < data.dn && rank < 10) {\n      let dataCopy = { ...data }\n      dataCopy.dn = grade\n      setData(dataCopy)\n    }\n  }\n\n  const handleChangeAp = (event, newValue) => {\n    validate(newValue, 0)\n\n    let dataCopy = { ...data }\n    dataCopy.ap = newValue\n    setData(dataCopy)\n  }\n\n  const handleChangeAn = (event, newValue) => {\n    validate(newValue, 1)\n\n    let dataCopy = { ...data }\n    dataCopy.an = newValue\n    setData(dataCopy)\n  }\n\n  const handleChangeAm = (event, newValue) => {\n    validate(newValue, 2)\n\n    let dataCopy = { ...data }\n    dataCopy.am = newValue\n    setData(dataCopy)\n  }\n\n  const handleChangeBp = (event, newValue) => {\n    validate(newValue, 3)\n\n    let dataCopy = { ...data }\n    dataCopy.bp = newValue\n    setData(dataCopy)\n  }\n\n  const handleChangeBn = (event, newValue) => {\n    validate(newValue, 4)\n\n    let dataCopy = { ...data }\n    dataCopy.bn = newValue\n    setData(dataCopy)\n  }\n\n  const handleChangeBm = (event, newValue) => {\n    validate(newValue, 5)\n\n    let dataCopy = { ...data }\n    dataCopy.bm = newValue\n    setData(dataCopy)\n  }\n\n  const handleChangeCp = (event, newValue) => {\n    validate(newValue, 6)\n\n    let dataCopy = { ...data }\n    dataCopy.cp = newValue\n    setData(dataCopy)\n  }\n\n  const handleChangeCn = (event, newValue) => {\n    validate(newValue, 7)\n\n    let dataCopy = { ...data }\n    dataCopy.cn = newValue\n    setData(dataCopy)\n  }\n\n  const handleChangeCm = (event, newValue) => {\n    validate(newValue, 8)\n\n    let dataCopy = { ...data }\n    dataCopy.cm = newValue\n    setData(dataCopy)\n  }\n\n  const handleChangeDp = (event, newValue) => {\n    validate(newValue, 9)\n\n    let dataCopy = { ...data }\n    dataCopy.dp = newValue\n    setData(dataCopy)\n  }\n\n  const handleChangeDn = (event, newValue) => {\n    validate(newValue, 10)\n    let dataCopy = { ...data }\n    dataCopy.dn = newValue\n    setData(dataCopy)\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography id='range-slider' gutterBottom>\n        A+\n      </Typography>\n      <Slider\n        track='inverted'\n        value={data.ap}\n        max={100}\n        onChange={handleChangeAp}\n        valueLabelDisplay='auto'\n        aria-labelledby='range-slider'\n        getAriaValueText={valuetext}\n        valueLabelDisplay='on'\n        marks={[\n          {\n            value: 100,\n            label: '100%',\n          },\n        ]}\n      />\n\n      <Typography id='range-slider' gutterBottom>\n        A\n      </Typography>\n      <Slider\n        track='inverted'\n        value={data.an}\n        max={data.ap}\n        onChange={handleChangeAn}\n        valueLabelDisplay='auto'\n        aria-labelledby='range-slider'\n        getAriaValueText={valuetext}\n        valueLabelDisplay='on'\n      />\n\n      <Typography id='range-slider' gutterBottom>\n        A-\n      </Typography>\n      <Slider\n        track='inverted'\n        value={data.am}\n        max={data.an}\n        onChange={handleChangeAm}\n        valueLabelDisplay='auto'\n        aria-labelledby='range-slider'\n        getAriaValueText={valuetext}\n        valueLabelDisplay='on'\n      />\n\n      <Typography id='range-slider' gutterBottom>\n        B+\n      </Typography>\n      <Slider\n        track='inverted'\n        value={data.bp}\n        max={data.am}\n        onChange={handleChangeBp}\n        valueLabelDisplay='auto'\n        aria-labelledby='range-slider'\n        getAriaValueText={valuetext}\n        valueLabelDisplay='on'\n      />\n\n      <Typography id='range-slider' gutterBottom>\n        B\n      </Typography>\n      <Slider\n        track='inverted'\n        value={data.bn}\n        max={data.bp}\n        onChange={handleChangeBn}\n        valueLabelDisplay='auto'\n        aria-labelledby='range-slider'\n        getAriaValueText={valuetext}\n        valueLabelDisplay='on'\n      />\n\n      <Typography id='range-slider' gutterBottom>\n        B-\n      </Typography>\n      <Slider\n        track='inverted'\n        value={data.bm}\n        max={data.bn}\n        onChange={handleChangeBm}\n        valueLabelDisplay='auto'\n        aria-labelledby='range-slider'\n        getAriaValueText={valuetext}\n        valueLabelDisplay='on'\n      />\n\n      <Typography id='range-slider' gutterBottom>\n        C+\n      </Typography>\n      <Slider\n        track='inverted'\n        value={data.cp}\n        max={data.bm}\n        onChange={handleChangeCp}\n        valueLabelDisplay='auto'\n        aria-labelledby='range-slider'\n        getAriaValueText={valuetext}\n        valueLabelDisplay='on'\n      />\n\n      <Typography id='range-slider' gutterBottom>\n        C\n      </Typography>\n      <Slider\n        track='inverted'\n        value={data.cn}\n        max={data.cp}\n        onChange={handleChangeCn}\n        valueLabelDisplay='auto'\n        aria-labelledby='range-slider'\n        getAriaValueText={valuetext}\n        valueLabelDisplay='on'\n      />\n\n      <Typography id='range-slider' gutterBottom>\n        C-\n      </Typography>\n      <Slider\n        track='inverted'\n        value={data.cm}\n        max={data.cn}\n        onChange={handleChangeCm}\n        valueLabelDisplay='auto'\n        aria-labelledby='range-slider'\n        getAriaValueText={valuetext}\n        valueLabelDisplay='on'\n      />\n\n      <Typography id='range-slider' gutterBottom>\n        D+\n      </Typography>\n      <Slider\n        track='inverted'\n        value={data.dp}\n        max={data.cm}\n        onChange={handleChangeDp}\n        valueLabelDisplay='auto'\n        aria-labelledby='range-slider'\n        getAriaValueText={valuetext}\n        valueLabelDisplay='on'\n      />\n\n      <Typography id='range-slider' gutterBottom>\n        D\n      </Typography>\n      <Slider\n        track='inverted'\n        value={data.dn}\n        max={data.dp}\n        onChange={handleChangeDn}\n        valueLabelDisplay='auto'\n        aria-labelledby='range-slider'\n        getAriaValueText={valuetext}\n        valueLabelDisplay='on'\n      />\n\n      <Button\n        variant='contained'\n        color='primary'\n        size='small'\n        startIcon={<SaveIcon />}\n        // disabled={!changedData}\n        className={classes.button}\n        onClick={clickSaveHandler}\n      >\n        Save\n      </Button>\n    </div>\n  )\n}\n",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":56,"column":14,"nodeType":"87","messageId":"88","endLine":56,"endColumn":446},{"ruleId":"89","severity":1,"message":"90","line":103,"column":6,"nodeType":"91","endLine":103,"endColumn":8,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":12},{"ruleId":"93","severity":1,"message":"97","line":8,"column":8,"nodeType":"95","messageId":"96","endLine":8,"endColumn":17},{"ruleId":"89","severity":1,"message":"90","line":41,"column":6,"nodeType":"91","endLine":41,"endColumn":8,"suggestions":"98"},{"ruleId":"89","severity":1,"message":"90","line":70,"column":6,"nodeType":"91","endLine":70,"endColumn":8,"suggestions":"99"},{"ruleId":"89","severity":1,"message":"90","line":175,"column":6,"nodeType":"91","endLine":175,"endColumn":8,"suggestions":"100"},{"ruleId":"89","severity":1,"message":"90","line":65,"column":6,"nodeType":"91","endLine":65,"endColumn":8,"suggestions":"101"},{"ruleId":"89","severity":1,"message":"90","line":68,"column":6,"nodeType":"91","endLine":68,"endColumn":8,"suggestions":"102"},{"ruleId":"93","severity":1,"message":"103","line":44,"column":10,"nodeType":"95","messageId":"96","endLine":44,"endColumn":17},{"ruleId":"93","severity":1,"message":"104","line":44,"column":19,"nodeType":"95","messageId":"96","endLine":44,"endColumn":29},{"ruleId":"93","severity":1,"message":"105","line":45,"column":10,"nodeType":"95","messageId":"96","endLine":45,"endColumn":23},{"ruleId":"93","severity":1,"message":"106","line":45,"column":25,"nodeType":"95","messageId":"96","endLine":45,"endColumn":41},{"ruleId":"89","severity":1,"message":"90","line":49,"column":6,"nodeType":"91","endLine":49,"endColumn":8,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":84,"column":17,"nodeType":"110","messageId":"88","endLine":84,"endColumn":19},{"ruleId":"111","severity":1,"message":"112","line":259,"column":9,"nodeType":"113","endLine":259,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":279,"column":9,"nodeType":"113","endLine":279,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":293,"column":9,"nodeType":"113","endLine":293,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":307,"column":9,"nodeType":"113","endLine":307,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":321,"column":9,"nodeType":"113","endLine":321,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":335,"column":9,"nodeType":"113","endLine":335,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":349,"column":9,"nodeType":"113","endLine":349,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":363,"column":9,"nodeType":"113","endLine":363,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":377,"column":9,"nodeType":"113","endLine":377,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":391,"column":9,"nodeType":"113","endLine":391,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":405,"column":9,"nodeType":"113","endLine":405,"endColumn":31},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-control-regex","Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e, \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e.","Literal","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refresh'. Either include it or remove the dependency array.","ArrayExpression",["116"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'validator' is defined but never used.",["117"],["118"],["119"],["120"],["121"],"'iserror' is assigned a value but never used.","'setIserror' is assigned a value but never used.","'errorMessages' is assigned a value but never used.","'setErrorMessages' is assigned a value but never used.",["122"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"123","fix":"125"},{"desc":"123","fix":"126"},{"desc":"123","fix":"127"},{"desc":"123","fix":"128"},{"desc":"123","fix":"129"},{"desc":"123","fix":"130"},"Update the dependencies array to be: [refresh]",{"range":"131","text":"132"},{"range":"133","text":"132"},{"range":"134","text":"132"},{"range":"135","text":"132"},{"range":"136","text":"132"},{"range":"137","text":"132"},{"range":"138","text":"132"},[4152,4154],"[refresh]",[1229,1231],[3003,3005],[4955,4957],[2942,2944],[3032,3034],[1205,1207]]