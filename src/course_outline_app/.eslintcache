[{"C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\index.js":"1","C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\reportWebVitals.js":"2","C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\App.js":"3","C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\GradeComponent.js":"4","C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\Timetable.js":"5","C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\Course.js":"6","C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\Instructor.js":"7","C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\LearningOutcome.js":"8","C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\Textbook.js":"9"},{"size":520,"mtime":1610993626039,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1608313812118,"results":"12","hashOfConfig":"11"},{"size":225,"mtime":1610952088851,"results":"13","hashOfConfig":"11"},{"size":6811,"mtime":1611191954689,"results":"14","hashOfConfig":"11"},{"size":7814,"mtime":1611105375520,"results":"15","hashOfConfig":"11"},{"size":8225,"mtime":1611197652188,"results":"16","hashOfConfig":"11"},{"size":8609,"mtime":1611192011027,"results":"17","hashOfConfig":"11"},{"size":6697,"mtime":1611098069377,"results":"18","hashOfConfig":"11"},{"size":7311,"mtime":1611105438527,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1jo3wlc",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\index.js",[],["43","44"],"C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\reportWebVitals.js",[],"C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\App.js",["45"],"import React, { Component } from 'react';\r\nimport Instructor from './components/Instructor';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Instructor />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\GradeComponent.js",["46"],"C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\Timetable.js",["47"],"import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { forwardRef } from 'react';\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport axios from 'axios'\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: `http://localhost:8000/api`\r\n})\r\n\r\nfunction Timetable({selcourse}) {\r\n\r\n  var columns = [\r\n    {title: \"id\", field: \"id\", hidden: true},\r\n    {title: \"course_id\", field: \"course_id\", hidden: true},\r\n    {title: \"Instructor Type\", field: \"instructor_type\"},\r\n    {title: \"Section\", field: \"section\"},\r\n    {title: \"Section Type\", field: \"section_type\"},\r\n    {title: \"Days\", field: \"days\"},\r\n    {title: \"Time\", field: \"time\"},\r\n    {title: \"Location\", field: \"location\"},\r\n    {title: \"Hours Per Week\", field: \"hoursPerWeek\"},\r\n    {title: \"Students per Instructor\", field: \"studentsPerInstructor\"}\r\n  ]\r\n  const [data, setData] = useState([]); //table data\r\n\r\n  //for error handling\r\n  const [iserror, setIserror] = useState(false)\r\n  const [errorMessages, setErrorMessages] = useState([])\r\n\r\n  useEffect(() => { \r\n    refresh()\r\n  }, [])\r\n\r\n  const refresh = () => {\r\n    // update data\r\n    api.get(\"/timetables?course_id=\" + selcourse)\r\n        .then(res => {               \r\n            setData(res.data)\r\n         })\r\n         .catch(error=>{\r\n             console.log(\"Error\")\r\n         })\r\n  }\r\n\r\n  const handleRowUpdate = (newData, oldData, resolve) => {\r\n    //validation\r\n    let errorList = []\r\n    if(newData.instructor_type === \"\"){\r\n      errorList.push(\"Please enter instructor type\")\r\n    }\r\n    if(newData.section === \"\"){\r\n      errorList.push(\"Please enter section name\")\r\n    }\r\n    if(newData.section_type === \"\"){\r\n      errorList.push(\"Please enter section type\")\r\n    }\r\n    if(newData.days === \"\"){\r\n      errorList.push(\"Please enter days\")\r\n    }\r\n    if(newData.time === \"\"){\r\n      errorList.push(\"Please enter time\")\r\n    }\r\n    if(newData.location === \"\"){\r\n      errorList.push(\"Please enter location\")\r\n    }\r\n    if(newData.hoursPerWeek === \"\"){\r\n      errorList.push(\"Please enter hours per week\")\r\n    }\r\n    if(newData.studentsPerInstructor === \"\"){\r\n      errorList.push(\"Please enter students per instructor\")\r\n    }\r\n\r\n    if(errorList.length < 1){\r\n      api.put(\"/timetables/\" + newData.id, newData)\r\n      .then(res => {\r\n        refresh()\r\n        resolve()\r\n        setIserror(false)\r\n        setErrorMessages([])\r\n      })\r\n      .catch(error => {\r\n        setErrorMessages([\"Update failed! Server error\"])\r\n        setIserror(true)\r\n        resolve()\r\n        \r\n      })\r\n    }else{\r\n      setErrorMessages(errorList)\r\n      setIserror(true)\r\n      resolve()\r\n\r\n    }\r\n    \r\n  }\r\n\r\n  const handleRowAdd = (newData, resolve) => {\r\n    //validation\r\n    let errorList = []\r\n    if(newData.instructor_type === undefined){\r\n      errorList.push(\"Please enter instructor type\")\r\n    }\r\n    if(newData.section === undefined){\r\n      errorList.push(\"Please enter section name\")\r\n    }\r\n    if(newData.section_type === undefined){\r\n      errorList.push(\"Please enter section type\")\r\n    }\r\n    if(newData.days === undefined){\r\n      errorList.push(\"Please enter days\")\r\n    }\r\n    if(newData.time === undefined){\r\n      errorList.push(\"Please enter time\")\r\n    }\r\n    if(newData.location === undefined){\r\n      errorList.push(\"Please enter location\")\r\n    }\r\n    if(newData.hoursPerWeek === undefined){\r\n      errorList.push(\"Please enter hours per week\")\r\n    }\r\n    if(newData.studentsPerInstructor === undefined){\r\n      errorList.push(\"Please enter students per instructor\")\r\n    }\r\n\r\n    let timetableData = {\r\n      course_id: selcourse,\r\n      component: newData.component,\r\n      learningOutcomes: newData.learningOutcomes,\r\n      weight: newData.weight,\r\n    }\r\n\r\n    if(errorList.length < 1){ //no error\r\n      api.post(\"/timetables\", timetableData)\r\n      .then(res => {\r\n\r\n        refresh()\r\n        resolve()\r\n        setErrorMessages([])\r\n        setIserror(false)\r\n      })\r\n      .catch(error => {\r\n        setErrorMessages([\"Cannot add data. Server error!\"])\r\n        setIserror(true)\r\n        resolve()\r\n      })\r\n    }else{\r\n      setErrorMessages(errorList)\r\n      setIserror(true)\r\n      resolve()\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  const handleRowDelete = (oldData, resolve) => {\r\n    \r\n    api.delete(\"/timetables/\" + oldData.id)\r\n      .then(res => {\r\n        refresh()\r\n\r\n        resolve()\r\n      })\r\n      .catch(error => {\r\n        setErrorMessages([\"Delete failed! Server error\"])\r\n        setIserror(true)\r\n        resolve()\r\n      })\r\n  }\r\n\r\n\r\n  return (\r\n    \r\n    <div className=\"Timetable\">\r\n      <div>\r\n        {iserror && \r\n          <Alert severity=\"error\">\r\n              {errorMessages.map((msg, i) => {\r\n                  return <div key={i}>{msg}</div>\r\n              })}\r\n          </Alert>\r\n        }       \r\n      </div>\r\n\r\n      <MaterialTable\r\n        title=\"List of Timetables\"\r\n        columns={columns}\r\n        data={data}\r\n        icons={tableIcons}\r\n        editable={{\r\n\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve) => {\r\n                handleRowUpdate(newData, oldData, resolve);\r\n                \r\n            }),\r\n          onRowAdd: (newData) =>\r\n            new Promise((resolve) => {\r\n              handleRowAdd(newData, resolve)\r\n            }),\r\n          onRowDelete: (oldData) =>\r\n            new Promise((resolve) => {\r\n              handleRowDelete(oldData, resolve)\r\n            }),\r\n        }}\r\n        options={{\r\n          search: false,\r\n          selection: false,\r\n          showSelectAllCheckbox: false,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timetable;","C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\Course.js",["48"],"C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\Instructor.js",["49"],"C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\LearningOutcome.js",["50"],"import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { forwardRef } from 'react';\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport axios from 'axios'\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: `http://localhost:8000/api`\r\n})\r\n\r\nfunction LearningOutcome({selcourse}) {\r\n\r\n  var columns = [\r\n    {title: \"id\", field: \"id\", hidden: true},\r\n    {title: \"course_id\", field: \"course_id\", hidden: true},\r\n    {title: \"Description\", field: \"description\"},\r\n    {title: \"Graduate Attribute\", field: \"gradAttribute\"},\r\n    {title: \"Instruction Level\", field: \"instLevel\"},\r\n  ]\r\n  const [data, setData] = useState([]); //table data\r\n\r\n  //for error handling\r\n  const [iserror, setIserror] = useState(false)\r\n  const [errorMessages, setErrorMessages] = useState([])\r\n\r\n  useEffect(() => { \r\n    refresh()\r\n  }, [])\r\n\r\n  const refresh = () => {\r\n    // update data\r\n    api.get(\"/learningOutcomes?course_id=\" + selcourse)\r\n        .then(res => {               \r\n            setData(res.data)\r\n         })\r\n         .catch(error=>{\r\n             console.log(\"Error\")\r\n         })\r\n  }\r\n\r\n  const handleRowUpdate = (newData, oldData, resolve) => {\r\n    //validation\r\n    let errorList = []\r\n    if(newData.description === \"\"){\r\n      errorList.push(\"Please enter description\")\r\n    }\r\n    if(newData.gradAttribute === \"\"){\r\n      errorList.push(\"Please enter graduate attribute\")\r\n    }\r\n    if(newData.instLevel === \"\"){\r\n      errorList.push(\"Please enter instruction level\")\r\n    }\r\n\r\n    if(errorList.length < 1){\r\n      api.put(\"/learningOutcomes/\" + newData.id, newData)\r\n      .then(res => {\r\n        refresh()\r\n        resolve()\r\n        setIserror(false)\r\n        setErrorMessages([])\r\n      })\r\n      .catch(error => {\r\n        setErrorMessages([\"Update failed! Server error\"])\r\n        setIserror(true)\r\n        resolve()\r\n        \r\n      })\r\n    }else{\r\n      setErrorMessages(errorList)\r\n      setIserror(true)\r\n      resolve()\r\n\r\n    }\r\n    \r\n  }\r\n\r\n  const handleRowAdd = (newData, resolve) => {\r\n    //validation\r\n    let errorList = []\r\n    if(newData.description === undefined){\r\n      errorList.push(\"Please enter description\")\r\n    }\r\n    if(newData.gradAttribute === undefined){\r\n      errorList.push(\"Please enter graduate attribute\")\r\n    }\r\n    if(newData.instLevel === undefined){\r\n      errorList.push(\"Please enter instruction level\")\r\n    }\r\n\r\n    let learningOutcomeData = {\r\n      course_id: selcourse,\r\n      description: newData.description,\r\n      gradAttribute: newData.gradAttribute,\r\n      instLevel: newData.instLevel,\r\n    }\r\n\r\n    if(errorList.length < 1){ //no error\r\n      api.post(\"/learningOutcomes\", learningOutcomeData)\r\n      .then(res => {\r\n\r\n        refresh()\r\n        resolve()\r\n        setErrorMessages([])\r\n        setIserror(false)\r\n      })\r\n      .catch(error => {\r\n        setErrorMessages([\"Cannot add data. Server error!\"])\r\n        setIserror(true)\r\n        resolve()\r\n      })\r\n    }else{\r\n      setErrorMessages(errorList)\r\n      setIserror(true)\r\n      resolve()\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  const handleRowDelete = (oldData, resolve) => {\r\n    \r\n    api.delete(\"/learningOutcomes/\" + oldData.id)\r\n      .then(res => {\r\n        refresh()\r\n\r\n        resolve()\r\n      })\r\n      .catch(error => {\r\n        setErrorMessages([\"Delete failed! Server error\"])\r\n        setIserror(true)\r\n        resolve()\r\n      })\r\n  }\r\n\r\n\r\n  return (\r\n    \r\n    <div className=\"LearningOutcome\">\r\n      <div>\r\n        {iserror && \r\n          <Alert severity=\"error\">\r\n              {errorMessages.map((msg, i) => {\r\n                  return <div key={i}>{msg}</div>\r\n              })}\r\n          </Alert>\r\n        }       \r\n      </div>\r\n\r\n      <MaterialTable\r\n        title=\"List of Learning Outcomes\"\r\n        columns={columns}\r\n        data={data}\r\n        icons={tableIcons}\r\n        editable={{\r\n\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve) => {\r\n                handleRowUpdate(newData, oldData, resolve);\r\n                \r\n            }),\r\n          onRowAdd: (newData) =>\r\n            new Promise((resolve) => {\r\n              handleRowAdd(newData, resolve)\r\n            }),\r\n          onRowDelete: (oldData) =>\r\n            new Promise((resolve) => {\r\n              handleRowDelete(oldData, resolve)\r\n            }),\r\n        }}\r\n        options={{\r\n          search: false,\r\n          selection: false,\r\n          showSelectAllCheckbox: false,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LearningOutcome;","C:\\Users\\Burak\\Desktop\\webProject607\\src\\course_outline_react_app\\course_outline_app\\src\\components\\Textbook.js",["51"],"import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { forwardRef } from 'react';\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport axios from 'axios'\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: `http://localhost:8000/api`\r\n})\r\n\r\nfunction Textbook({selcourse}) {\r\n\r\n  var columns = [\r\n    {title: \"id\", field: \"id\", hidden: true},\r\n    {title: \"course_id\", field: \"course_id\", hidden: true},\r\n    {title: \"Title\", field: \"title\"},\r\n    {title: \"Author(s)\", field: \"authors\"},\r\n    {title: \"Edition\", field: \"edition\"},\r\n    {title: \"Year\", field: \"year\"},\r\n    {title: \"Publisher\", field: \"publisher\"},\r\n    {title: \"Recommended?\", field: \"is_recommended\"}\r\n  ]\r\n  const [data, setData] = useState([]); //table data\r\n\r\n  //for error handling\r\n  const [iserror, setIserror] = useState(false)\r\n  const [errorMessages, setErrorMessages] = useState([])\r\n\r\n  useEffect(() => { \r\n    refresh()\r\n  }, [])\r\n\r\n  const refresh = () => {\r\n    // update data\r\n    api.get(\"/textbooks?course_id=\" + selcourse)\r\n        .then(res => {               \r\n            setData(res.data)\r\n         })\r\n         .catch(error=>{\r\n             console.log(\"Error\")\r\n         })\r\n  }\r\n\r\n  const handleRowUpdate = (newData, oldData, resolve) => {\r\n    //validation\r\n    let errorList = []\r\n    if(newData.title === \"\"){\r\n      errorList.push(\"Please enter title\")\r\n    }\r\n    if(newData.authors === \"\"){\r\n      errorList.push(\"Please enter at least an author\")\r\n    }\r\n    if(newData.edition === \"\"){\r\n      errorList.push(\"Please enter the edition\")\r\n    }\r\n    if(newData.year === \"\"){\r\n      errorList.push(\"Please enter year\")\r\n    }\r\n    if(newData.publisher === \"\"){\r\n      errorList.push(\"Please enter publisher\")\r\n    }\r\n    if(newData.is_recommended === \"\"){\r\n      errorList.push(\"Please enter recommended\")\r\n    }\r\n\r\n    if(errorList.length < 1){\r\n      api.put(\"/textbooks/\" + newData.id, newData)\r\n      .then(res => {\r\n        refresh()\r\n        resolve()\r\n        setIserror(false)\r\n        setErrorMessages([])\r\n      })\r\n      .catch(error => {\r\n        setErrorMessages([\"Update failed! Server error\"])\r\n        setIserror(true)\r\n        resolve()\r\n        \r\n      })\r\n    }else{\r\n      setErrorMessages(errorList)\r\n      setIserror(true)\r\n      resolve()\r\n\r\n    }\r\n    \r\n  }\r\n\r\n  const handleRowAdd = (newData, resolve) => {\r\n    //validation\r\n    let errorList = []\r\n    if(newData.title === undefined){\r\n      errorList.push(\"Please enter title\")\r\n    }\r\n    if(newData.authors === undefined){\r\n      errorList.push(\"Please enter at least an author\")\r\n    }\r\n    if(newData.edition === undefined){\r\n      errorList.push(\"Please enter the edition\")\r\n    }\r\n    if(newData.year === undefined){\r\n      errorList.push(\"Please enter year\")\r\n    }\r\n    if(newData.publisher === undefined){\r\n      errorList.push(\"Please enter publisher\")\r\n    }\r\n    if(newData.is_recommended === undefined){\r\n      errorList.push(\"Please enter recommended\")\r\n    }\r\n\r\n    let textbookData = {\r\n      course_id: selcourse,\r\n      title: newData.title,\r\n      authors: newData.authors,\r\n      edition: newData.edition,\r\n      year: newData.year,\r\n      publisher: newData.publisher,\r\n      is_recommended: newData.is_recommended,\r\n    }\r\n\r\n    if(errorList.length < 1){ //no error\r\n      api.post(\"/textbooks\", textbookData)\r\n      .then(res => {\r\n\r\n        refresh()\r\n        resolve()\r\n        setErrorMessages([])\r\n        setIserror(false)\r\n      })\r\n      .catch(error => {\r\n        setErrorMessages([\"Cannot add data. Server error!\"])\r\n        setIserror(true)\r\n        resolve()\r\n      })\r\n    }else{\r\n      setErrorMessages(errorList)\r\n      setIserror(true)\r\n      resolve()\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  const handleRowDelete = (oldData, resolve) => {\r\n    \r\n    api.delete(\"/textbooks/\" + oldData.id)\r\n      .then(res => {\r\n        refresh()\r\n\r\n        resolve()\r\n      })\r\n      .catch(error => {\r\n        setErrorMessages([\"Delete failed! Server error\"])\r\n        setIserror(true)\r\n        resolve()\r\n      })\r\n  }\r\n\r\n\r\n  return (\r\n    \r\n    <div className=\"Textbook\">\r\n      <div>\r\n        {iserror && \r\n          <Alert severity=\"error\">\r\n              {errorMessages.map((msg, i) => {\r\n                  return <div key={i}>{msg}</div>\r\n              })}\r\n          </Alert>\r\n        }       \r\n      </div>\r\n\r\n      <MaterialTable\r\n        title=\"List of Textbooks\"\r\n        columns={columns}\r\n        data={data}\r\n        icons={tableIcons}\r\n        editable={{\r\n\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve) => {\r\n                handleRowUpdate(newData, oldData, resolve);\r\n                \r\n            }),\r\n          onRowAdd: (newData) =>\r\n            new Promise((resolve) => {\r\n              handleRowAdd(newData, resolve)\r\n            }),\r\n          onRowDelete: (oldData) =>\r\n            new Promise((resolve) => {\r\n              handleRowDelete(oldData, resolve)\r\n            }),\r\n        }}\r\n        options={{\r\n          search: false,\r\n          selection: false,\r\n          showSelectAllCheckbox: false,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Textbook;",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":1,"column":17,"nodeType":"58","messageId":"59","endLine":1,"endColumn":26},{"ruleId":"60","severity":1,"message":"61","line":65,"column":6,"nodeType":"62","endLine":65,"endColumn":8,"suggestions":"63"},{"ruleId":"60","severity":1,"message":"61","line":70,"column":6,"nodeType":"62","endLine":70,"endColumn":8,"suggestions":"64"},{"ruleId":"60","severity":1,"message":"61","line":78,"column":6,"nodeType":"62","endLine":78,"endColumn":8,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":53,"column":14,"nodeType":"68","messageId":"69","endLine":53,"endColumn":446},{"ruleId":"60","severity":1,"message":"61","line":65,"column":6,"nodeType":"62","endLine":65,"endColumn":8,"suggestions":"70"},{"ruleId":"60","severity":1,"message":"61","line":68,"column":6,"nodeType":"62","endLine":68,"endColumn":8,"suggestions":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refresh'. Either include it or remove the dependency array.","ArrayExpression",["74"],["75"],["76"],"no-control-regex","Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e, \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e.","Literal","unexpected",["77"],["78"],"no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},{"desc":"79","fix":"81"},{"desc":"79","fix":"82"},{"desc":"79","fix":"83"},{"desc":"79","fix":"84"},"Update the dependencies array to be: [refresh]",{"range":"85","text":"86"},{"range":"87","text":"86"},{"range":"88","text":"86"},{"range":"89","text":"86"},{"range":"90","text":"86"},[3004,3006],"[refresh]",[3235,3237],[3539,3541],[3006,3008],[3098,3100]]